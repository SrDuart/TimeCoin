//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfService.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoUsuarioInsert", ReplyAction="http://tempuri.org/IService1/TipoUsuarioInsertResponse")]
        void TipoUsuarioInsert(Biblioteca.ClassesBasicas.TipoUsuario tipoUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoUsuarioInsert", ReplyAction="http://tempuri.org/IService1/TipoUsuarioInsertResponse")]
        System.Threading.Tasks.Task TipoUsuarioInsertAsync(Biblioteca.ClassesBasicas.TipoUsuario tipoUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoUsuarioUpdate", ReplyAction="http://tempuri.org/IService1/TipoUsuarioUpdateResponse")]
        void TipoUsuarioUpdate(Biblioteca.ClassesBasicas.TipoUsuario tipoUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoUsuarioUpdate", ReplyAction="http://tempuri.org/IService1/TipoUsuarioUpdateResponse")]
        System.Threading.Tasks.Task TipoUsuarioUpdateAsync(Biblioteca.ClassesBasicas.TipoUsuario tipoUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoUsuarioDelete", ReplyAction="http://tempuri.org/IService1/TipoUsuarioDeleteResponse")]
        void TipoUsuarioDelete(Biblioteca.ClassesBasicas.TipoUsuario tipoUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoUsuarioDelete", ReplyAction="http://tempuri.org/IService1/TipoUsuarioDeleteResponse")]
        System.Threading.Tasks.Task TipoUsuarioDeleteAsync(Biblioteca.ClassesBasicas.TipoUsuario tipoUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoUsuarioSelect", ReplyAction="http://tempuri.org/IService1/TipoUsuarioSelectResponse")]
        Biblioteca.ClassesBasicas.TipoUsuario[] TipoUsuarioSelect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoUsuarioSelect", ReplyAction="http://tempuri.org/IService1/TipoUsuarioSelectResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.TipoUsuario[]> TipoUsuarioSelectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoUsuarioVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/TipoUsuarioVerificaDuplicidadeResponse")]
        bool TipoUsuarioVerificaDuplicidade(Biblioteca.ClassesBasicas.TipoUsuario filtro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoUsuarioVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/TipoUsuarioVerificaDuplicidadeResponse")]
        System.Threading.Tasks.Task<bool> TipoUsuarioVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.TipoUsuario filtro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoUsuarioVerificaExistencia", ReplyAction="http://tempuri.org/IService1/TipoUsuarioVerificaExistenciaResponse")]
        bool TipoUsuarioVerificaExistencia(Biblioteca.ClassesBasicas.TipoUsuario filtro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoUsuarioVerificaExistencia", ReplyAction="http://tempuri.org/IService1/TipoUsuarioVerificaExistenciaResponse")]
        System.Threading.Tasks.Task<bool> TipoUsuarioVerificaExistenciaAsync(Biblioteca.ClassesBasicas.TipoUsuario filtro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SituacaoInsert", ReplyAction="http://tempuri.org/IService1/SituacaoInsertResponse")]
        void SituacaoInsert(Biblioteca.ClassesBasicas.Situacao situacao);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SituacaoInsert", ReplyAction="http://tempuri.org/IService1/SituacaoInsertResponse")]
        System.Threading.Tasks.Task SituacaoInsertAsync(Biblioteca.ClassesBasicas.Situacao situacao);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SituacaoUpdate", ReplyAction="http://tempuri.org/IService1/SituacaoUpdateResponse")]
        void SituacaoUpdate(Biblioteca.ClassesBasicas.Situacao situacao);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SituacaoUpdate", ReplyAction="http://tempuri.org/IService1/SituacaoUpdateResponse")]
        System.Threading.Tasks.Task SituacaoUpdateAsync(Biblioteca.ClassesBasicas.Situacao situacao);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SituacaoDelete", ReplyAction="http://tempuri.org/IService1/SituacaoDeleteResponse")]
        void SituacaoDelete(Biblioteca.ClassesBasicas.Situacao situacao);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SituacaoDelete", ReplyAction="http://tempuri.org/IService1/SituacaoDeleteResponse")]
        System.Threading.Tasks.Task SituacaoDeleteAsync(Biblioteca.ClassesBasicas.Situacao situacao);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SituacaoSelect", ReplyAction="http://tempuri.org/IService1/SituacaoSelectResponse")]
        Biblioteca.ClassesBasicas.Situacao[] SituacaoSelect(Biblioteca.ClassesBasicas.Situacao filtro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SituacaoSelect", ReplyAction="http://tempuri.org/IService1/SituacaoSelectResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Situacao[]> SituacaoSelectAsync(Biblioteca.ClassesBasicas.Situacao filtro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SituacaoVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/SituacaoVerificaDuplicidadeResponse")]
        bool SituacaoVerificaDuplicidade(Biblioteca.ClassesBasicas.Situacao situacao);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SituacaoVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/SituacaoVerificaDuplicidadeResponse")]
        System.Threading.Tasks.Task<bool> SituacaoVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.Situacao situacao);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioInsert", ReplyAction="http://tempuri.org/IService1/UsuarioInsertResponse")]
        void UsuarioInsert(Biblioteca.ClassesBasicas.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioInsert", ReplyAction="http://tempuri.org/IService1/UsuarioInsertResponse")]
        System.Threading.Tasks.Task UsuarioInsertAsync(Biblioteca.ClassesBasicas.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioUpdate", ReplyAction="http://tempuri.org/IService1/UsuarioUpdateResponse")]
        void UsuarioUpdate(Biblioteca.ClassesBasicas.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioUpdate", ReplyAction="http://tempuri.org/IService1/UsuarioUpdateResponse")]
        System.Threading.Tasks.Task UsuarioUpdateAsync(Biblioteca.ClassesBasicas.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioDelete", ReplyAction="http://tempuri.org/IService1/UsuarioDeleteResponse")]
        void UsuarioDelete(Biblioteca.ClassesBasicas.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioDelete", ReplyAction="http://tempuri.org/IService1/UsuarioDeleteResponse")]
        System.Threading.Tasks.Task UsuarioDeleteAsync(Biblioteca.ClassesBasicas.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioVerificaLogin", ReplyAction="http://tempuri.org/IService1/UsuarioVerificaLoginResponse")]
        void UsuarioVerificaLogin(Biblioteca.ClassesBasicas.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioVerificaLogin", ReplyAction="http://tempuri.org/IService1/UsuarioVerificaLoginResponse")]
        System.Threading.Tasks.Task UsuarioVerificaLoginAsync(Biblioteca.ClassesBasicas.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioSelect", ReplyAction="http://tempuri.org/IService1/UsuarioSelectResponse")]
        Biblioteca.ClassesBasicas.Usuario[] UsuarioSelect(Biblioteca.ClassesBasicas.Usuario filtro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioSelect", ReplyAction="http://tempuri.org/IService1/UsuarioSelectResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Usuario[]> UsuarioSelectAsync(Biblioteca.ClassesBasicas.Usuario filtro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/UsuarioVerificaDuplicidadeResponse")]
        bool UsuarioVerificaDuplicidade(Biblioteca.ClassesBasicas.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/UsuarioVerificaDuplicidadeResponse")]
        System.Threading.Tasks.Task<bool> UsuarioVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServicoInsert", ReplyAction="http://tempuri.org/IService1/ServicoInsertResponse")]
        void ServicoInsert(Biblioteca.ClassesBasicas.Servico servico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServicoInsert", ReplyAction="http://tempuri.org/IService1/ServicoInsertResponse")]
        System.Threading.Tasks.Task ServicoInsertAsync(Biblioteca.ClassesBasicas.Servico servico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServicoUpdate", ReplyAction="http://tempuri.org/IService1/ServicoUpdateResponse")]
        void ServicoUpdate(Biblioteca.ClassesBasicas.Servico servico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServicoUpdate", ReplyAction="http://tempuri.org/IService1/ServicoUpdateResponse")]
        System.Threading.Tasks.Task ServicoUpdateAsync(Biblioteca.ClassesBasicas.Servico servico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServicoDelete", ReplyAction="http://tempuri.org/IService1/ServicoDeleteResponse")]
        void ServicoDelete(Biblioteca.ClassesBasicas.Servico servico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServicoDelete", ReplyAction="http://tempuri.org/IService1/ServicoDeleteResponse")]
        System.Threading.Tasks.Task ServicoDeleteAsync(Biblioteca.ClassesBasicas.Servico servico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServicoSelect", ReplyAction="http://tempuri.org/IService1/ServicoSelectResponse")]
        Biblioteca.ClassesBasicas.Servico[] ServicoSelect(Biblioteca.ClassesBasicas.Servico filtro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServicoSelect", ReplyAction="http://tempuri.org/IService1/ServicoSelectResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Servico[]> ServicoSelectAsync(Biblioteca.ClassesBasicas.Servico filtro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServicoVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/ServicoVerificaDuplicidadeResponse")]
        bool ServicoVerificaDuplicidade(Biblioteca.ClassesBasicas.Servico servico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServicoVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/ServicoVerificaDuplicidadeResponse")]
        System.Threading.Tasks.Task<bool> ServicoVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.Servico servico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelecionaUsuario", ReplyAction="http://tempuri.org/IService1/SelecionaUsuarioResponse")]
        Biblioteca.ClassesBasicas.Usuario SelecionaUsuario(Biblioteca.ClassesBasicas.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelecionaUsuario", ReplyAction="http://tempuri.org/IService1/SelecionaUsuarioResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Usuario> SelecionaUsuarioAsync(Biblioteca.ClassesBasicas.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HabilidadeInsert", ReplyAction="http://tempuri.org/IService1/HabilidadeInsertResponse")]
        void HabilidadeInsert(Biblioteca.ClassesBasicas.Habilidade habilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HabilidadeInsert", ReplyAction="http://tempuri.org/IService1/HabilidadeInsertResponse")]
        System.Threading.Tasks.Task HabilidadeInsertAsync(Biblioteca.ClassesBasicas.Habilidade habilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HabilidadeUpdate", ReplyAction="http://tempuri.org/IService1/HabilidadeUpdateResponse")]
        void HabilidadeUpdate(Biblioteca.ClassesBasicas.Habilidade habilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HabilidadeUpdate", ReplyAction="http://tempuri.org/IService1/HabilidadeUpdateResponse")]
        System.Threading.Tasks.Task HabilidadeUpdateAsync(Biblioteca.ClassesBasicas.Habilidade habilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HabilidadeDelete", ReplyAction="http://tempuri.org/IService1/HabilidadeDeleteResponse")]
        void HabilidadeDelete(Biblioteca.ClassesBasicas.Habilidade habilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HabilidadeDelete", ReplyAction="http://tempuri.org/IService1/HabilidadeDeleteResponse")]
        System.Threading.Tasks.Task HabilidadeDeleteAsync(Biblioteca.ClassesBasicas.Habilidade habilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HabilidadeSelect", ReplyAction="http://tempuri.org/IService1/HabilidadeSelectResponse")]
        Biblioteca.ClassesBasicas.Habilidade[] HabilidadeSelect(Biblioteca.ClassesBasicas.Habilidade habilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HabilidadeSelect", ReplyAction="http://tempuri.org/IService1/HabilidadeSelectResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Habilidade[]> HabilidadeSelectAsync(Biblioteca.ClassesBasicas.Habilidade habilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HabilidadeVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/HabilidadeVerificaDuplicidadeResponse")]
        bool HabilidadeVerificaDuplicidade(Biblioteca.ClassesBasicas.Habilidade habilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HabilidadeVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/HabilidadeVerificaDuplicidadeResponse")]
        System.Threading.Tasks.Task<bool> HabilidadeVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.Habilidade habilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PrestaInsert", ReplyAction="http://tempuri.org/IService1/PrestaInsertResponse")]
        void PrestaInsert(Biblioteca.ClassesBasicas.Presta presta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PrestaInsert", ReplyAction="http://tempuri.org/IService1/PrestaInsertResponse")]
        System.Threading.Tasks.Task PrestaInsertAsync(Biblioteca.ClassesBasicas.Presta presta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PrestaDelete", ReplyAction="http://tempuri.org/IService1/PrestaDeleteResponse")]
        void PrestaDelete(Biblioteca.ClassesBasicas.Presta presta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PrestaDelete", ReplyAction="http://tempuri.org/IService1/PrestaDeleteResponse")]
        System.Threading.Tasks.Task PrestaDeleteAsync(Biblioteca.ClassesBasicas.Presta presta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PrestaSelect", ReplyAction="http://tempuri.org/IService1/PrestaSelectResponse")]
        Biblioteca.ClassesBasicas.Presta[] PrestaSelect(Biblioteca.ClassesBasicas.Presta presta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PrestaSelect", ReplyAction="http://tempuri.org/IService1/PrestaSelectResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Presta[]> PrestaSelectAsync(Biblioteca.ClassesBasicas.Presta presta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecebeInsert", ReplyAction="http://tempuri.org/IService1/RecebeInsertResponse")]
        void RecebeInsert(Biblioteca.ClassesBasicas.Recebe recebe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecebeInsert", ReplyAction="http://tempuri.org/IService1/RecebeInsertResponse")]
        System.Threading.Tasks.Task RecebeInsertAsync(Biblioteca.ClassesBasicas.Recebe recebe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecebeDelete", ReplyAction="http://tempuri.org/IService1/RecebeDeleteResponse")]
        void RecebeDelete(Biblioteca.ClassesBasicas.Recebe recebe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecebeDelete", ReplyAction="http://tempuri.org/IService1/RecebeDeleteResponse")]
        System.Threading.Tasks.Task RecebeDeleteAsync(Biblioteca.ClassesBasicas.Recebe recebe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecebeSelect", ReplyAction="http://tempuri.org/IService1/RecebeSelectResponse")]
        Biblioteca.ClassesBasicas.Recebe[] RecebeSelect(Biblioteca.ClassesBasicas.Recebe recebe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecebeSelect", ReplyAction="http://tempuri.org/IService1/RecebeSelectResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Recebe[]> RecebeSelectAsync(Biblioteca.ClassesBasicas.Recebe recebe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AnuncioInsert", ReplyAction="http://tempuri.org/IService1/AnuncioInsertResponse")]
        void AnuncioInsert(Biblioteca.ClassesBasicas.Anuncio anuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AnuncioInsert", ReplyAction="http://tempuri.org/IService1/AnuncioInsertResponse")]
        System.Threading.Tasks.Task AnuncioInsertAsync(Biblioteca.ClassesBasicas.Anuncio anuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AnuncioUpdate", ReplyAction="http://tempuri.org/IService1/AnuncioUpdateResponse")]
        void AnuncioUpdate(Biblioteca.ClassesBasicas.Anuncio anuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AnuncioUpdate", ReplyAction="http://tempuri.org/IService1/AnuncioUpdateResponse")]
        System.Threading.Tasks.Task AnuncioUpdateAsync(Biblioteca.ClassesBasicas.Anuncio anuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AnuncioDelete", ReplyAction="http://tempuri.org/IService1/AnuncioDeleteResponse")]
        void AnuncioDelete(Biblioteca.ClassesBasicas.Anuncio anuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AnuncioDelete", ReplyAction="http://tempuri.org/IService1/AnuncioDeleteResponse")]
        System.Threading.Tasks.Task AnuncioDeleteAsync(Biblioteca.ClassesBasicas.Anuncio anuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AnuncioSelect", ReplyAction="http://tempuri.org/IService1/AnuncioSelectResponse")]
        Biblioteca.ClassesBasicas.Anuncio[] AnuncioSelect(Biblioteca.ClassesBasicas.Anuncio filtro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AnuncioSelect", ReplyAction="http://tempuri.org/IService1/AnuncioSelectResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Anuncio[]> AnuncioSelectAsync(Biblioteca.ClassesBasicas.Anuncio filtro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AnuncioVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/AnuncioVerificaDuplicidadeResponse")]
        bool AnuncioVerificaDuplicidade(Biblioteca.ClassesBasicas.Anuncio anuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AnuncioVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/AnuncioVerificaDuplicidadeResponse")]
        System.Threading.Tasks.Task<bool> AnuncioVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.Anuncio anuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoAnuncioInsert", ReplyAction="http://tempuri.org/IService1/TipoAnuncioInsertResponse")]
        void TipoAnuncioInsert(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoAnuncioInsert", ReplyAction="http://tempuri.org/IService1/TipoAnuncioInsertResponse")]
        System.Threading.Tasks.Task TipoAnuncioInsertAsync(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoAnuncioUpdate", ReplyAction="http://tempuri.org/IService1/TipoAnuncioUpdateResponse")]
        void TipoAnuncioUpdate(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoAnuncioUpdate", ReplyAction="http://tempuri.org/IService1/TipoAnuncioUpdateResponse")]
        System.Threading.Tasks.Task TipoAnuncioUpdateAsync(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoAnuncioDelete", ReplyAction="http://tempuri.org/IService1/TipoAnuncioDeleteResponse")]
        void TipoAnuncioDelete(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoAnuncioDelete", ReplyAction="http://tempuri.org/IService1/TipoAnuncioDeleteResponse")]
        System.Threading.Tasks.Task TipoAnuncioDeleteAsync(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoAnuncioSelect", ReplyAction="http://tempuri.org/IService1/TipoAnuncioSelectResponse")]
        Biblioteca.ClassesBasicas.TipoAnuncio[] TipoAnuncioSelect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoAnuncioSelect", ReplyAction="http://tempuri.org/IService1/TipoAnuncioSelectResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.TipoAnuncio[]> TipoAnuncioSelectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoAnuncioVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/TipoAnuncioVerificaDuplicidadeResponse")]
        bool TipoAnuncioVerificaDuplicidade(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoAnuncioVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/TipoAnuncioVerificaDuplicidadeResponse")]
        System.Threading.Tasks.Task<bool> TipoAnuncioVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioHabilidadeInsert", ReplyAction="http://tempuri.org/IService1/UsuarioHabilidadeInsertResponse")]
        void UsuarioHabilidadeInsert(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioHabilidadeInsert", ReplyAction="http://tempuri.org/IService1/UsuarioHabilidadeInsertResponse")]
        System.Threading.Tasks.Task UsuarioHabilidadeInsertAsync(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioHabilidadeUpdate", ReplyAction="http://tempuri.org/IService1/UsuarioHabilidadeUpdateResponse")]
        void UsuarioHabilidadeUpdate(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioHabilidadeUpdate", ReplyAction="http://tempuri.org/IService1/UsuarioHabilidadeUpdateResponse")]
        System.Threading.Tasks.Task UsuarioHabilidadeUpdateAsync(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioHabilidadeDelete", ReplyAction="http://tempuri.org/IService1/UsuarioHabilidadeDeleteResponse")]
        void UsuarioHabilidadeDelete(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioHabilidadeDelete", ReplyAction="http://tempuri.org/IService1/UsuarioHabilidadeDeleteResponse")]
        System.Threading.Tasks.Task UsuarioHabilidadeDeleteAsync(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioHabilidadeSelect", ReplyAction="http://tempuri.org/IService1/UsuarioHabilidadeSelectResponse")]
        Biblioteca.ClassesBasicas.UsuarioHabilidade[] UsuarioHabilidadeSelect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioHabilidadeSelect", ReplyAction="http://tempuri.org/IService1/UsuarioHabilidadeSelectResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.UsuarioHabilidade[]> UsuarioHabilidadeSelectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioHabilidadeVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/UsuarioHabilidadeVerificaDuplicidadeResponse")]
        bool UsuarioHabilidadeVerificaDuplicidade(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsuarioHabilidadeVerificaDuplicidade", ReplyAction="http://tempuri.org/IService1/UsuarioHabilidadeVerificaDuplicidadeResponse")]
        System.Threading.Tasks.Task<bool> UsuarioHabilidadeVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WcfService.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WcfService.ServiceReference1.IService1>, WcfService.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void TipoUsuarioInsert(Biblioteca.ClassesBasicas.TipoUsuario tipoUsuario) {
            base.Channel.TipoUsuarioInsert(tipoUsuario);
        }
        
        public System.Threading.Tasks.Task TipoUsuarioInsertAsync(Biblioteca.ClassesBasicas.TipoUsuario tipoUsuario) {
            return base.Channel.TipoUsuarioInsertAsync(tipoUsuario);
        }
        
        public void TipoUsuarioUpdate(Biblioteca.ClassesBasicas.TipoUsuario tipoUsuario) {
            base.Channel.TipoUsuarioUpdate(tipoUsuario);
        }
        
        public System.Threading.Tasks.Task TipoUsuarioUpdateAsync(Biblioteca.ClassesBasicas.TipoUsuario tipoUsuario) {
            return base.Channel.TipoUsuarioUpdateAsync(tipoUsuario);
        }
        
        public void TipoUsuarioDelete(Biblioteca.ClassesBasicas.TipoUsuario tipoUsuario) {
            base.Channel.TipoUsuarioDelete(tipoUsuario);
        }
        
        public System.Threading.Tasks.Task TipoUsuarioDeleteAsync(Biblioteca.ClassesBasicas.TipoUsuario tipoUsuario) {
            return base.Channel.TipoUsuarioDeleteAsync(tipoUsuario);
        }
        
        public Biblioteca.ClassesBasicas.TipoUsuario[] TipoUsuarioSelect() {
            return base.Channel.TipoUsuarioSelect();
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.TipoUsuario[]> TipoUsuarioSelectAsync() {
            return base.Channel.TipoUsuarioSelectAsync();
        }
        
        public bool TipoUsuarioVerificaDuplicidade(Biblioteca.ClassesBasicas.TipoUsuario filtro) {
            return base.Channel.TipoUsuarioVerificaDuplicidade(filtro);
        }
        
        public System.Threading.Tasks.Task<bool> TipoUsuarioVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.TipoUsuario filtro) {
            return base.Channel.TipoUsuarioVerificaDuplicidadeAsync(filtro);
        }
        
        public bool TipoUsuarioVerificaExistencia(Biblioteca.ClassesBasicas.TipoUsuario filtro) {
            return base.Channel.TipoUsuarioVerificaExistencia(filtro);
        }
        
        public System.Threading.Tasks.Task<bool> TipoUsuarioVerificaExistenciaAsync(Biblioteca.ClassesBasicas.TipoUsuario filtro) {
            return base.Channel.TipoUsuarioVerificaExistenciaAsync(filtro);
        }
        
        public void SituacaoInsert(Biblioteca.ClassesBasicas.Situacao situacao) {
            base.Channel.SituacaoInsert(situacao);
        }
        
        public System.Threading.Tasks.Task SituacaoInsertAsync(Biblioteca.ClassesBasicas.Situacao situacao) {
            return base.Channel.SituacaoInsertAsync(situacao);
        }
        
        public void SituacaoUpdate(Biblioteca.ClassesBasicas.Situacao situacao) {
            base.Channel.SituacaoUpdate(situacao);
        }
        
        public System.Threading.Tasks.Task SituacaoUpdateAsync(Biblioteca.ClassesBasicas.Situacao situacao) {
            return base.Channel.SituacaoUpdateAsync(situacao);
        }
        
        public void SituacaoDelete(Biblioteca.ClassesBasicas.Situacao situacao) {
            base.Channel.SituacaoDelete(situacao);
        }
        
        public System.Threading.Tasks.Task SituacaoDeleteAsync(Biblioteca.ClassesBasicas.Situacao situacao) {
            return base.Channel.SituacaoDeleteAsync(situacao);
        }
        
        public Biblioteca.ClassesBasicas.Situacao[] SituacaoSelect(Biblioteca.ClassesBasicas.Situacao filtro) {
            return base.Channel.SituacaoSelect(filtro);
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Situacao[]> SituacaoSelectAsync(Biblioteca.ClassesBasicas.Situacao filtro) {
            return base.Channel.SituacaoSelectAsync(filtro);
        }
        
        public bool SituacaoVerificaDuplicidade(Biblioteca.ClassesBasicas.Situacao situacao) {
            return base.Channel.SituacaoVerificaDuplicidade(situacao);
        }
        
        public System.Threading.Tasks.Task<bool> SituacaoVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.Situacao situacao) {
            return base.Channel.SituacaoVerificaDuplicidadeAsync(situacao);
        }
        
        public void UsuarioInsert(Biblioteca.ClassesBasicas.Usuario usuario) {
            base.Channel.UsuarioInsert(usuario);
        }
        
        public System.Threading.Tasks.Task UsuarioInsertAsync(Biblioteca.ClassesBasicas.Usuario usuario) {
            return base.Channel.UsuarioInsertAsync(usuario);
        }
        
        public void UsuarioUpdate(Biblioteca.ClassesBasicas.Usuario usuario) {
            base.Channel.UsuarioUpdate(usuario);
        }
        
        public System.Threading.Tasks.Task UsuarioUpdateAsync(Biblioteca.ClassesBasicas.Usuario usuario) {
            return base.Channel.UsuarioUpdateAsync(usuario);
        }
        
        public void UsuarioDelete(Biblioteca.ClassesBasicas.Usuario usuario) {
            base.Channel.UsuarioDelete(usuario);
        }
        
        public System.Threading.Tasks.Task UsuarioDeleteAsync(Biblioteca.ClassesBasicas.Usuario usuario) {
            return base.Channel.UsuarioDeleteAsync(usuario);
        }
        
        public void UsuarioVerificaLogin(Biblioteca.ClassesBasicas.Usuario usuario) {
            base.Channel.UsuarioVerificaLogin(usuario);
        }
        
        public System.Threading.Tasks.Task UsuarioVerificaLoginAsync(Biblioteca.ClassesBasicas.Usuario usuario) {
            return base.Channel.UsuarioVerificaLoginAsync(usuario);
        }
        
        public Biblioteca.ClassesBasicas.Usuario[] UsuarioSelect(Biblioteca.ClassesBasicas.Usuario filtro) {
            return base.Channel.UsuarioSelect(filtro);
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Usuario[]> UsuarioSelectAsync(Biblioteca.ClassesBasicas.Usuario filtro) {
            return base.Channel.UsuarioSelectAsync(filtro);
        }
        
        public bool UsuarioVerificaDuplicidade(Biblioteca.ClassesBasicas.Usuario usuario) {
            return base.Channel.UsuarioVerificaDuplicidade(usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UsuarioVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.Usuario usuario) {
            return base.Channel.UsuarioVerificaDuplicidadeAsync(usuario);
        }
        
        public void ServicoInsert(Biblioteca.ClassesBasicas.Servico servico) {
            base.Channel.ServicoInsert(servico);
        }
        
        public System.Threading.Tasks.Task ServicoInsertAsync(Biblioteca.ClassesBasicas.Servico servico) {
            return base.Channel.ServicoInsertAsync(servico);
        }
        
        public void ServicoUpdate(Biblioteca.ClassesBasicas.Servico servico) {
            base.Channel.ServicoUpdate(servico);
        }
        
        public System.Threading.Tasks.Task ServicoUpdateAsync(Biblioteca.ClassesBasicas.Servico servico) {
            return base.Channel.ServicoUpdateAsync(servico);
        }
        
        public void ServicoDelete(Biblioteca.ClassesBasicas.Servico servico) {
            base.Channel.ServicoDelete(servico);
        }
        
        public System.Threading.Tasks.Task ServicoDeleteAsync(Biblioteca.ClassesBasicas.Servico servico) {
            return base.Channel.ServicoDeleteAsync(servico);
        }
        
        public Biblioteca.ClassesBasicas.Servico[] ServicoSelect(Biblioteca.ClassesBasicas.Servico filtro) {
            return base.Channel.ServicoSelect(filtro);
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Servico[]> ServicoSelectAsync(Biblioteca.ClassesBasicas.Servico filtro) {
            return base.Channel.ServicoSelectAsync(filtro);
        }
        
        public bool ServicoVerificaDuplicidade(Biblioteca.ClassesBasicas.Servico servico) {
            return base.Channel.ServicoVerificaDuplicidade(servico);
        }
        
        public System.Threading.Tasks.Task<bool> ServicoVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.Servico servico) {
            return base.Channel.ServicoVerificaDuplicidadeAsync(servico);
        }
        
        public Biblioteca.ClassesBasicas.Usuario SelecionaUsuario(Biblioteca.ClassesBasicas.Usuario usuario) {
            return base.Channel.SelecionaUsuario(usuario);
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Usuario> SelecionaUsuarioAsync(Biblioteca.ClassesBasicas.Usuario usuario) {
            return base.Channel.SelecionaUsuarioAsync(usuario);
        }
        
        public void HabilidadeInsert(Biblioteca.ClassesBasicas.Habilidade habilidade) {
            base.Channel.HabilidadeInsert(habilidade);
        }
        
        public System.Threading.Tasks.Task HabilidadeInsertAsync(Biblioteca.ClassesBasicas.Habilidade habilidade) {
            return base.Channel.HabilidadeInsertAsync(habilidade);
        }
        
        public void HabilidadeUpdate(Biblioteca.ClassesBasicas.Habilidade habilidade) {
            base.Channel.HabilidadeUpdate(habilidade);
        }
        
        public System.Threading.Tasks.Task HabilidadeUpdateAsync(Biblioteca.ClassesBasicas.Habilidade habilidade) {
            return base.Channel.HabilidadeUpdateAsync(habilidade);
        }
        
        public void HabilidadeDelete(Biblioteca.ClassesBasicas.Habilidade habilidade) {
            base.Channel.HabilidadeDelete(habilidade);
        }
        
        public System.Threading.Tasks.Task HabilidadeDeleteAsync(Biblioteca.ClassesBasicas.Habilidade habilidade) {
            return base.Channel.HabilidadeDeleteAsync(habilidade);
        }
        
        public Biblioteca.ClassesBasicas.Habilidade[] HabilidadeSelect(Biblioteca.ClassesBasicas.Habilidade habilidade) {
            return base.Channel.HabilidadeSelect(habilidade);
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Habilidade[]> HabilidadeSelectAsync(Biblioteca.ClassesBasicas.Habilidade habilidade) {
            return base.Channel.HabilidadeSelectAsync(habilidade);
        }
        
        public bool HabilidadeVerificaDuplicidade(Biblioteca.ClassesBasicas.Habilidade habilidade) {
            return base.Channel.HabilidadeVerificaDuplicidade(habilidade);
        }
        
        public System.Threading.Tasks.Task<bool> HabilidadeVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.Habilidade habilidade) {
            return base.Channel.HabilidadeVerificaDuplicidadeAsync(habilidade);
        }
        
        public void PrestaInsert(Biblioteca.ClassesBasicas.Presta presta) {
            base.Channel.PrestaInsert(presta);
        }
        
        public System.Threading.Tasks.Task PrestaInsertAsync(Biblioteca.ClassesBasicas.Presta presta) {
            return base.Channel.PrestaInsertAsync(presta);
        }
        
        public void PrestaDelete(Biblioteca.ClassesBasicas.Presta presta) {
            base.Channel.PrestaDelete(presta);
        }
        
        public System.Threading.Tasks.Task PrestaDeleteAsync(Biblioteca.ClassesBasicas.Presta presta) {
            return base.Channel.PrestaDeleteAsync(presta);
        }
        
        public Biblioteca.ClassesBasicas.Presta[] PrestaSelect(Biblioteca.ClassesBasicas.Presta presta) {
            return base.Channel.PrestaSelect(presta);
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Presta[]> PrestaSelectAsync(Biblioteca.ClassesBasicas.Presta presta) {
            return base.Channel.PrestaSelectAsync(presta);
        }
        
        public void RecebeInsert(Biblioteca.ClassesBasicas.Recebe recebe) {
            base.Channel.RecebeInsert(recebe);
        }
        
        public System.Threading.Tasks.Task RecebeInsertAsync(Biblioteca.ClassesBasicas.Recebe recebe) {
            return base.Channel.RecebeInsertAsync(recebe);
        }
        
        public void RecebeDelete(Biblioteca.ClassesBasicas.Recebe recebe) {
            base.Channel.RecebeDelete(recebe);
        }
        
        public System.Threading.Tasks.Task RecebeDeleteAsync(Biblioteca.ClassesBasicas.Recebe recebe) {
            return base.Channel.RecebeDeleteAsync(recebe);
        }
        
        public Biblioteca.ClassesBasicas.Recebe[] RecebeSelect(Biblioteca.ClassesBasicas.Recebe recebe) {
            return base.Channel.RecebeSelect(recebe);
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Recebe[]> RecebeSelectAsync(Biblioteca.ClassesBasicas.Recebe recebe) {
            return base.Channel.RecebeSelectAsync(recebe);
        }
        
        public void AnuncioInsert(Biblioteca.ClassesBasicas.Anuncio anuncio) {
            base.Channel.AnuncioInsert(anuncio);
        }
        
        public System.Threading.Tasks.Task AnuncioInsertAsync(Biblioteca.ClassesBasicas.Anuncio anuncio) {
            return base.Channel.AnuncioInsertAsync(anuncio);
        }
        
        public void AnuncioUpdate(Biblioteca.ClassesBasicas.Anuncio anuncio) {
            base.Channel.AnuncioUpdate(anuncio);
        }
        
        public System.Threading.Tasks.Task AnuncioUpdateAsync(Biblioteca.ClassesBasicas.Anuncio anuncio) {
            return base.Channel.AnuncioUpdateAsync(anuncio);
        }
        
        public void AnuncioDelete(Biblioteca.ClassesBasicas.Anuncio anuncio) {
            base.Channel.AnuncioDelete(anuncio);
        }
        
        public System.Threading.Tasks.Task AnuncioDeleteAsync(Biblioteca.ClassesBasicas.Anuncio anuncio) {
            return base.Channel.AnuncioDeleteAsync(anuncio);
        }
        
        public Biblioteca.ClassesBasicas.Anuncio[] AnuncioSelect(Biblioteca.ClassesBasicas.Anuncio filtro) {
            return base.Channel.AnuncioSelect(filtro);
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Anuncio[]> AnuncioSelectAsync(Biblioteca.ClassesBasicas.Anuncio filtro) {
            return base.Channel.AnuncioSelectAsync(filtro);
        }
        
        public bool AnuncioVerificaDuplicidade(Biblioteca.ClassesBasicas.Anuncio anuncio) {
            return base.Channel.AnuncioVerificaDuplicidade(anuncio);
        }
        
        public System.Threading.Tasks.Task<bool> AnuncioVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.Anuncio anuncio) {
            return base.Channel.AnuncioVerificaDuplicidadeAsync(anuncio);
        }
        
        public void TipoAnuncioInsert(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio) {
            base.Channel.TipoAnuncioInsert(tipoAnuncio);
        }
        
        public System.Threading.Tasks.Task TipoAnuncioInsertAsync(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio) {
            return base.Channel.TipoAnuncioInsertAsync(tipoAnuncio);
        }
        
        public void TipoAnuncioUpdate(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio) {
            base.Channel.TipoAnuncioUpdate(tipoAnuncio);
        }
        
        public System.Threading.Tasks.Task TipoAnuncioUpdateAsync(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio) {
            return base.Channel.TipoAnuncioUpdateAsync(tipoAnuncio);
        }
        
        public void TipoAnuncioDelete(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio) {
            base.Channel.TipoAnuncioDelete(tipoAnuncio);
        }
        
        public System.Threading.Tasks.Task TipoAnuncioDeleteAsync(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio) {
            return base.Channel.TipoAnuncioDeleteAsync(tipoAnuncio);
        }
        
        public Biblioteca.ClassesBasicas.TipoAnuncio[] TipoAnuncioSelect() {
            return base.Channel.TipoAnuncioSelect();
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.TipoAnuncio[]> TipoAnuncioSelectAsync() {
            return base.Channel.TipoAnuncioSelectAsync();
        }
        
        public bool TipoAnuncioVerificaDuplicidade(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio) {
            return base.Channel.TipoAnuncioVerificaDuplicidade(tipoAnuncio);
        }
        
        public System.Threading.Tasks.Task<bool> TipoAnuncioVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.TipoAnuncio tipoAnuncio) {
            return base.Channel.TipoAnuncioVerificaDuplicidadeAsync(tipoAnuncio);
        }
        
        public void UsuarioHabilidadeInsert(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade) {
            base.Channel.UsuarioHabilidadeInsert(usuarioHabilidade);
        }
        
        public System.Threading.Tasks.Task UsuarioHabilidadeInsertAsync(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade) {
            return base.Channel.UsuarioHabilidadeInsertAsync(usuarioHabilidade);
        }
        
        public void UsuarioHabilidadeUpdate(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade) {
            base.Channel.UsuarioHabilidadeUpdate(usuarioHabilidade);
        }
        
        public System.Threading.Tasks.Task UsuarioHabilidadeUpdateAsync(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade) {
            return base.Channel.UsuarioHabilidadeUpdateAsync(usuarioHabilidade);
        }
        
        public void UsuarioHabilidadeDelete(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade) {
            base.Channel.UsuarioHabilidadeDelete(usuarioHabilidade);
        }
        
        public System.Threading.Tasks.Task UsuarioHabilidadeDeleteAsync(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade) {
            return base.Channel.UsuarioHabilidadeDeleteAsync(usuarioHabilidade);
        }
        
        public Biblioteca.ClassesBasicas.UsuarioHabilidade[] UsuarioHabilidadeSelect() {
            return base.Channel.UsuarioHabilidadeSelect();
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.UsuarioHabilidade[]> UsuarioHabilidadeSelectAsync() {
            return base.Channel.UsuarioHabilidadeSelectAsync();
        }
        
        public bool UsuarioHabilidadeVerificaDuplicidade(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade) {
            return base.Channel.UsuarioHabilidadeVerificaDuplicidade(usuarioHabilidade);
        }
        
        public System.Threading.Tasks.Task<bool> UsuarioHabilidadeVerificaDuplicidadeAsync(Biblioteca.ClassesBasicas.UsuarioHabilidade usuarioHabilidade) {
            return base.Channel.UsuarioHabilidadeVerificaDuplicidadeAsync(usuarioHabilidade);
        }
    }
}
